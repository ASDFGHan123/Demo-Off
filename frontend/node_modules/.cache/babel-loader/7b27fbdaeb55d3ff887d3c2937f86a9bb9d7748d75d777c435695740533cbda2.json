{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\salaam\\\\Desktop\\\\OffChat\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already authenticated\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await axios.get('/api/auth/user/', {\n        withCredentials: true\n      });\n      setUser(response.data);\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('/login/', {\n        username,\n        password\n      }, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        await checkAuthStatus();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n  const register = async userData => {\n    try {\n      const formData = new URLSearchParams();\n      Object.entries(userData).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      const response = await axios.post('/register/', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        await checkAuthStatus();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      await axios.post('/logout/', {}, {\n        withCredentials: true\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthStatus","response","get","withCredentials","data","error","login","username","password","post","headers","status","console","register","userData","formData","URLSearchParams","Object","entries","forEach","key","value","append","logout","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Users/salaam/Desktop/OffChat/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  user_id: number;\r\n  username: string;\r\n  display_name: string;\r\n  email?: string;\r\n  profile_image_url?: string;\r\n  is_online: boolean;\r\n  enable_notifications: boolean;\r\n  notification_sound: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<boolean>;\r\n  register: (userData: RegisterData) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\ninterface RegisterData {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  display_name: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already authenticated\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/user/', { withCredentials: true });\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      const response = await axios.post('/login/', {\r\n        username,\r\n        password\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData): Promise<boolean> => {\r\n    try {\r\n      const formData = new URLSearchParams();\r\n      Object.entries(userData).forEach(([key, value]) => {\r\n        formData.append(key, value);\r\n      });\r\n      const response = await axios.post('/register/', formData, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await axios.post('/logout/', {}, { withCredentials: true });\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}