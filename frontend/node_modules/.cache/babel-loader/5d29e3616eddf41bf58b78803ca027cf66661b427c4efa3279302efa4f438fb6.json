{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is already authenticated\ncheckAuthStatus();},[]);const checkAuthStatus=async()=>{try{const response=await axios.get('/api/auth/user/',{withCredentials:true});setUser(response.data);}catch(error){setUser(null);}finally{setLoading(false);}};const login=async(username,password)=>{try{const response=await axios.post('/login/',{username,password},{headers:{'Content-Type':'application/x-www-form-urlencoded'},withCredentials:true});if(response.status===200){await checkAuthStatus();return true;}return false;}catch(error){console.error('Login error:',error);return false;}};const register=async userData=>{try{const response=await axios.post('/register/',userData,{headers:{'Content-Type':'application/x-www-form-urlencoded'},withCredentials:true});if(response.status===200){await checkAuthStatus();return true;}return false;}catch(error){console.error('Registration error:',error);return false;}};const logout=async()=>{try{await axios.post('/logout/',{},{withCredentials:true});}catch(error){console.error('Logout error:',error);}finally{setUser(null);}};const value={user,isAuthenticated:!!user,login,register,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuthStatus","response","get","withCredentials","data","error","login","username","password","post","headers","status","console","register","userData","logout","value","isAuthenticated","Provider"],"sources":["c:/Users/salaam/Desktop/OffChat/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  user_id: number;\r\n  username: string;\r\n  display_name: string;\r\n  email?: string;\r\n  profile_image_url?: string;\r\n  is_online: boolean;\r\n  enable_notifications: boolean;\r\n  notification_sound: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<boolean>;\r\n  register: (userData: RegisterData) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\ninterface RegisterData {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  display_name: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already authenticated\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/user/', { withCredentials: true });\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      const response = await axios.post('/login/', {\r\n        username,\r\n        password\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData): Promise<boolean> => {\r\n    try {\r\n      const response = await axios.post('/register/', userData, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await axios.post('/logout/', {}, { withCredentials: true });\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}