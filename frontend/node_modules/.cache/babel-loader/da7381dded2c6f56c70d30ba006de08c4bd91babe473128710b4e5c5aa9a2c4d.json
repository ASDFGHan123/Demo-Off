{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\salaam\\\\Desktop\\\\OffChat\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Helper function to get CSRF token from cookies\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCsrfToken = () => {\n  const name = 'csrftoken';\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue || '';\n};\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already authenticated\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await axios.get('/api/users/me/', {\n        withCredentials: true\n      });\n      setUser(response.data);\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('/login/', {\n        username,\n        password\n      }, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        await checkAuthStatus();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post('/api/auth/register/', userData, {\n        withCredentials: true\n      });\n      if (response.status === 201) {\n        await checkAuthStatus();\n        return true;\n      }\n      return false;\n    } catch (error) {\n      var _error$response;\n      console.error('Registration error:', error);\n      // Check if it's a validation error (400) or server error (500)\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n        // This is likely a validation error like username taken\n        return false;\n      }\n      // For other errors, still return false but log them\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      await axios.post('/logout/', {}, {\n        withCredentials: true\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","getCsrfToken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthStatus","response","get","withCredentials","data","error","login","username","password","post","headers","status","console","register","userData","_error$response","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Users/salaam/Desktop/OffChat/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Helper function to get CSRF token from cookies\r\nconst getCsrfToken = (): string => {\r\n  const name = 'csrftoken';\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue || '';\r\n};\r\n\r\ninterface User {\r\n  user_id: number;\r\n  username: string;\r\n  display_name: string;\r\n  email?: string;\r\n  profile_image_url?: string;\r\n  is_online: boolean;\r\n  enable_notifications: boolean;\r\n  notification_sound: boolean;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<boolean>;\r\n  register: (userData: RegisterData) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\ninterface RegisterData {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  display_name: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already authenticated\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await axios.get('/api/users/me/', { withCredentials: true });\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string): Promise<boolean> => {\r\n    try {\r\n      const response = await axios.post('/login/', {\r\n        username,\r\n        password\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData): Promise<boolean> => {\r\n    try {\r\n      const response = await axios.post('/api/auth/register/', userData, {\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        await checkAuthStatus();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error: any) {\r\n      console.error('Registration error:', error);\r\n      // Check if it's a validation error (400) or server error (500)\r\n      if (error.response?.status === 400) {\r\n        // This is likely a validation error like username taken\r\n        return false;\r\n      }\r\n      // For other errors, still return false but log them\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await axios.post('/logout/', {}, { withCredentials: true });\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}