{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add CSRF token\napi.interceptors.request.use(config => {\n  const csrfToken = getCsrfToken();\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken;\n  }\n  return config;\n});\nfunction getCsrfToken() {\n  var _document$cookie$spli;\n  const csrfToken = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  return csrfToken || null;\n}\n\n// Auth API\nexport const authAPI = {\n  login: (username, password) => api.post('/login/', {\n    username,\n    password\n  }, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }),\n  register: userData => api.post('/api/auth/register/', userData),\n  logout: () => api.post('/logout/'),\n  getCurrentUser: () => api.get('/api/users/me/')\n};\n\n// Chat API\nexport const chatAPI = {\n  getConversations: () => api.get('/api/conversations/'),\n  getConversation: id => api.get(`/api/conversations/${id}/`),\n  getMessages: conversationId => api.get(`/api/conversations/${conversationId}/messages/`),\n  sendMessage: (conversationId, content, replyTo) => api.post(`/chat/${conversationId}/send/`, {\n    content,\n    reply_to: replyTo\n  }),\n  createPrivateChat: userId => api.post('/api/create-private-chat/', {\n    user_id: userId\n  }),\n  createGroupChat: data => api.post('/api/create-group-chat/', data),\n  searchMessages: query => api.get('/api/search/messages/', {\n    params: {\n      q: query\n    }\n  })\n};\n\n// User API\nexport const userAPI = {\n  searchUsers: query => api.get('/search/', {\n    params: {\n      q: query\n    }\n  }),\n  getUsers: () => api.get('/api/users/'),\n  getUser: id => api.get(`/api/users/${id}/`),\n  updateUser: (id, data) => api.put(`/api/users/${id}/`, data)\n};\n\n// File upload API\nexport const fileAPI = {\n  uploadAttachment: (file, messageId) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('message_id', messageId.toString());\n    return api.post('/upload-attachment/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","getCsrfToken","_document$cookie$spli","document","cookie","split","find","row","startsWith","authAPI","login","username","password","post","register","userData","logout","getCurrentUser","get","chatAPI","getConversations","getConversation","id","getMessages","conversationId","sendMessage","content","replyTo","reply_to","createPrivateChat","userId","user_id","createGroupChat","data","searchMessages","query","params","q","userAPI","searchUsers","getUsers","getUser","updateUser","put","fileAPI","uploadAttachment","file","messageId","formData","FormData","append","toString"],"sources":["c:/Users/salaam/Desktop/OffChat/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  withCredentials: true,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add CSRF token\r\napi.interceptors.request.use((config) => {\r\n  const csrfToken = getCsrfToken();\r\n  if (csrfToken) {\r\n    config.headers['X-CSRFToken'] = csrfToken;\r\n  }\r\n  return config;\r\n});\r\n\r\nfunction getCsrfToken(): string | null {\r\n  const csrfToken = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith('csrftoken='))\r\n    ?.split('=')[1];\r\n  return csrfToken || null;\r\n}\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (username: string, password: string) =>\r\n    api.post('/login/', { username, password }, {\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n    }),\r\n\r\n  register: (userData: any) =>\r\n    api.post('/api/auth/register/', userData),\r\n\r\n  logout: () => api.post('/logout/'),\r\n\r\n  getCurrentUser: () => api.get('/api/users/me/'),\r\n};\r\n\r\n// Chat API\r\nexport const chatAPI = {\r\n  getConversations: () => api.get('/api/conversations/'),\r\n\r\n  getConversation: (id: number) => api.get(`/api/conversations/${id}/`),\r\n\r\n  getMessages: (conversationId: number) => api.get(`/api/conversations/${conversationId}/messages/`),\r\n\r\n  sendMessage: (conversationId: number, content: string, replyTo?: number) =>\r\n    api.post(`/chat/${conversationId}/send/`, { content, reply_to: replyTo }),\r\n\r\n  createPrivateChat: (userId: number) =>\r\n    api.post('/api/create-private-chat/', { user_id: userId }),\r\n\r\n  createGroupChat: (data: { title: string; member_ids: number[]; description?: string }) =>\r\n    api.post('/api/create-group-chat/', data),\r\n\r\n  searchMessages: (query: string) =>\r\n    api.get('/api/search/messages/', { params: { q: query } }),\r\n};\r\n\r\n// User API\r\nexport const userAPI = {\r\n  searchUsers: (query: string) => api.get('/search/', { params: { q: query } }),\r\n\r\n  getUsers: () => api.get('/api/users/'),\r\n\r\n  getUser: (id: number) => api.get(`/api/users/${id}/`),\r\n\r\n  updateUser: (id: number, data: any) => api.put(`/api/users/${id}/`, data),\r\n};\r\n\r\n// File upload API\r\nexport const fileAPI = {\r\n  uploadAttachment: (file: File, messageId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('message_id', messageId.toString());\r\n\r\n    return api.post('/upload-attachment/', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}