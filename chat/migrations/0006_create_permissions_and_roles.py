# Generated by Django 5.2.7 on 2025-10-21 05:42

from django.db import migrations


def create_permissions_and_roles(apps, schema_editor):
    Permission = apps.get_model('chat', 'Permission')
    Role = apps.get_model('chat', 'Role')
    RolePermission = apps.get_model('chat', 'RolePermission')

    # Create permissions
    permissions_data = [
        ('view_chat', 'Can view chat conversations'),
        ('send_message', 'Can send messages'),
        ('edit_own_message', 'Can edit own messages'),
        ('delete_own_message', 'Can delete own messages'),
        ('edit_any_message', 'Can edit any message in conversation'),
        ('delete_any_message', 'Can delete any message in conversation'),
        ('create_group_chat', 'Can create group chats'),
        ('manage_group_members', 'Can add/remove group members'),
        ('manage_group_settings', 'Can change group settings'),
        ('kick_members', 'Can remove members from group'),
        ('ban_members', 'Can ban members from group'),
        ('view_admin_panel', 'Can access admin panel'),
        ('manage_users', 'Can manage user accounts'),
        ('manage_roles', 'Can assign and remove user roles'),
        ('view_audit_logs', 'Can view audit logs'),
        ('delete_conversations', 'Can delete entire conversations'),
    ]

    permissions = {}
    for code, description in permissions_data:
        perm = Permission.objects.create(code=code, description=description)
        permissions[code] = perm

    # Create roles
    roles_data = [
        ('user', 'Regular user with basic chat permissions', [
            'view_chat', 'send_message', 'edit_own_message', 'delete_own_message', 'create_group_chat'
        ]),
        ('moderator', 'Moderator with additional moderation permissions', [
            'view_chat', 'send_message', 'edit_own_message', 'delete_own_message', 'create_group_chat',
            'edit_any_message', 'delete_any_message', 'manage_group_members', 'kick_members'
        ]),
        ('admin', 'Administrator with full permissions', [
            'view_chat', 'send_message', 'edit_own_message', 'delete_own_message', 'create_group_chat',
            'edit_any_message', 'delete_any_message', 'manage_group_members', 'manage_group_settings',
            'kick_members', 'ban_members', 'view_admin_panel', 'manage_users', 'manage_roles',
            'view_audit_logs', 'delete_conversations'
        ]),
        ('superuser', 'Superuser with all permissions', list(permissions.keys())),
    ]

    for role_name, description, perm_codes in roles_data:
        role = Role.objects.create(name=role_name, description=description)
        for perm_code in perm_codes:
            RolePermission.objects.create(role=role, permission=permissions[perm_code])


def reverse_permissions_and_roles(apps, schema_editor):
    Permission = apps.get_model('chat', 'Permission')
    Role = apps.get_model('chat', 'Role')
    RolePermission = apps.get_model('chat', 'RolePermission')

    # Delete in reverse order
    RolePermission.objects.all().delete()
    Role.objects.all().delete()
    Permission.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0005_user_enable_notifications_user_notification_sound'),
    ]

    operations = [
        migrations.RunPython(create_permissions_and_roles, reverse_permissions_and_roles),
    ]
